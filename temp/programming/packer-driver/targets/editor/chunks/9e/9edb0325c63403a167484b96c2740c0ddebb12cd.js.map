{"version":3,"sources":["file:///C:/Users/admin/NewProject_18/assets/Scripts/External/immer/plugins/patches.ts"],"names":["enablePatches","REPLACE","ADD","REMOVE","generatePatches_","state","basePath","patches","inversePatches","type_","generatePatchesFromAssigned","generateArrayPatches","generateSetPatches","base_","assigned_","copy_","length","delta","start","end","i","path","concat","push","op","value","clonePatchValueIfNeeded","replaceCount","key","assignedValue","origValue","forEach","has","unshift","generateReplacementPatches_","rootState","replacement","applyPatches_","draft","patch","base","join","type","deepClonePatchValue","set","splice","add","delete","obj","Array","isArray","map","Map","from","entries","k","v","Set","cloned","Object","create","getPrototypeOf","get","each","getArchtype","isSet","isMap","loadPlugin","ProxyTypeProxyObject","ProxyTypeES5Object","ProxyTypeMap","ProxyTypeES5Array","ProxyTypeProxyArray","ProxyTypeSet","ArchtypeMap","ArchtypeSet","ArchtypeArray","die","isDraft"],"mappings":"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","sourcesContent":["import {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tES5ArrayState,\n\tProxyArrayState,\n\tMapState,\n\tES5ObjectState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tProxyTypeProxyObject,\n\tProxyTypeES5Object,\n\tProxyTypeMap,\n\tProxyTypeES5Array,\n\tProxyTypeProxyArray,\n\tProxyTypeSet,\n\tArchtypeMap,\n\tArchtypeSet,\n\tArchtypeArray,\n\tdie\n} from \"../internal\"\nimport {isDraft} from \"../utils/common\"\n\nexport function enablePatches() {\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ProxyTypeProxyObject:\n\t\t\tcase ProxyTypeES5Object:\n\t\t\tcase ProxyTypeMap:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ProxyTypeES5Array:\n\t\t\tcase ProxyTypeProxyArray:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ProxyTypeSet:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ES5ArrayState | ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\tconst delta = copy_.length - base_.length\n\n\t\t// Find the first replaced index.\n\t\tlet start = 0\n\t\twhile (base_[start] === copy_[start] && start < base_.length) {\n\t\t\t++start\n\t\t}\n\n\t\t// Find the last replaced index. Search from the end to optimize splice patches.\n\t\tlet end = base_.length\n\t\twhile (end > start && base_[end - 1] === copy_[end + delta - 1]) {\n\t\t\t--end\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = start; i < end; ++i) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tconst replaceCount = patches.length\n\n\t\t// Process added indices.\n\t\tfor (let i = end + delta - 1; i >= end; --i) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches[replaceCount + i - end] = {\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t}\n\t\t\tinversePatches.push({\n\t\t\t\top: REMOVE,\n\t\t\t\tpath\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\trootState: ImmerState,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: rootState.base_\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tbase = get(base, path[i])\n\t\t\t\tif (typeof base !== \"object\") die(15, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchtypeMap:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase ArchtypeSet:\n\t\t\t\t\t\t\tdie(16)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchtypeArray:\n\t\t\t\t\t\t\treturn base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase ArchtypeMap:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase ArchtypeSet:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchtypeArray:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase ArchtypeMap:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase ArchtypeSet:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(17, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!obj || typeof obj !== \"object\") return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n"]}