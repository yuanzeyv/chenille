{"version":3,"sources":["file:///C:/Users/admin/NewProject_18/assets/Scripts/External/immer/types/types-external.ts"],"names":["never_used"],"mappings":";;;;;AAsKA;AACA;AACO,WAASA,UAAT,GAAsB,CAAE;;;;;;wBAAfA,U","sourcesContent":["import {Nothing} from \"../internal\"\n\ntype Tail<T extends any[]> = ((...t: T) => any) extends (\n\t_: any,\n\t...tail: infer TT\n) => any\n\t? TT\n\t: []\n\n/** Object types that should never be mapped */\ntype AtomicObject =\n\t| Function\n\t| Promise<any>\n\t| Date\n\t| RegExp\n\t| Boolean\n\t| Number\n\t| String\n\n/**\n * These should also never be mapped but must be tested after regular Map and\n * Set\n */\ntype WeakReferences = WeakMap<any, any> | WeakSet<any>\n\nexport type Draft<T> = T extends AtomicObject\n\t? T\n\t: T extends ReadonlyMap<infer K, infer V> // Map extends ReadonlyMap\n\t? Map<Draft<K>, Draft<V>>\n\t: T extends ReadonlySet<infer V> // Set extends ReadonlySet\n\t? Set<Draft<V>>\n\t: T extends WeakReferences\n\t? T\n\t: T extends object\n\t? {-readonly [K in keyof T]: Draft<T[K]>}\n\t: T\n\n/** Convert a mutable type into a readonly type */\nexport type Immutable<T> = T extends AtomicObject\n\t? T\n\t: T extends ReadonlyMap<infer K, infer V> // Map extends ReadonlyMap\n\t? ReadonlyMap<Immutable<K>, Immutable<V>>\n\t: T extends ReadonlySet<infer V> // Set extends ReadonlySet\n\t? ReadonlySet<Immutable<V>>\n\t: T extends WeakReferences\n\t? T\n\t: T extends object\n\t? {readonly [K in keyof T]: Immutable<T[K]>}\n\t: T\n\nexport interface Patch {\n\top: \"replace\" | \"remove\" | \"add\"\n\tpath: (string | number)[]\n\tvalue?: any\n}\n\nexport type PatchListener = (patches: Patch[], inversePatches: Patch[]) => void\n\n/** Converts `nothing` into `undefined` */\ntype FromNothing<T> = T extends Nothing ? undefined : T\n\n/** The inferred return type of `produce` */\nexport type Produced<Base, Return> = Return extends void\n\t? Base\n\t: Return extends Promise<infer Result>\n\t? Promise<Result extends void ? Base : FromNothing<Result>>\n\t: FromNothing<Return>\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport interface IProduce {\n\t/** Curried producer */\n\t<\n\t\tRecipe extends (...args: any[]) => any,\n\t\tParams extends any[] = Parameters<Recipe>,\n\t\tT = Params[0]\n\t>(\n\t\trecipe: Recipe\n\t): <Base extends Immutable<T>>(\n\t\tbase: Base,\n\t\t...rest: Tail<Params>\n\t) => Produced<Base, ReturnType<Recipe>>\n\t//   ^ by making the returned type generic, the actual type of the passed in object is preferred\n\t//     over the type used in the recipe. However, it does have to satisfy the immutable version used in the recipe\n\t//     Note: the type of S is the widened version of T, so it can have more props than T, but that is technically actually correct!\n\n\t/** Curried producer with initial state */\n\t<\n\t\tRecipe extends (...args: any[]) => any,\n\t\tParams extends any[] = Parameters<Recipe>,\n\t\tT = Params[0]\n\t>(\n\t\trecipe: Recipe,\n\t\tinitialState: Immutable<T>\n\t): <Base extends Immutable<T>>(\n\t\tbase?: Base,\n\t\t...rest: Tail<Params>\n\t) => Produced<Base, ReturnType<Recipe>>\n\n\t/** Normal producer */\n\t<Base, D = Draft<Base>, Return = void>(\n\t\tbase: Base,\n\t\trecipe: (draft: D) => Return,\n\t\tlistener?: PatchListener\n\t): Produced<Base, Return>\n}\n\n/**\n * Like `produce`, but instead of just returning the new state,\n * a tuple is returned with [nextState, patches, inversePatches]\n *\n * Like produce, this function supports currying\n */\nexport interface IProduceWithPatches {\n\t/** Curried producer */\n\t<\n\t\tRecipe extends (...args: any[]) => any,\n\t\tParams extends any[] = Parameters<Recipe>,\n\t\tT = Params[0]\n\t>(\n\t\trecipe: Recipe\n\t): <Base extends Immutable<T>>(\n\t\tbase: Base,\n\t\t...rest: Tail<Params>\n\t) => [Produced<Base, ReturnType<Recipe>>, Patch[], Patch[]]\n\t//   ^ by making the returned type generic, the actual type of the passed in object is preferred\n\t//     over the type used in the recipe. However, it does have to satisfy the immutable version used in the recipe\n\t//     Note: the type of S is the widened version of T, so it can have more props than T, but that is technically actually correct!\n\n\t/** Curried producer with initial state */\n\t<\n\t\tRecipe extends (...args: any[]) => any,\n\t\tParams extends any[] = Parameters<Recipe>,\n\t\tT = Params[0]\n\t>(\n\t\trecipe: Recipe,\n\t\tinitialState: Immutable<T>\n\t): <Base extends Immutable<T>>(\n\t\tbase?: Base,\n\t\t...rest: Tail<Params>\n\t) => [Produced<Base, ReturnType<Recipe>>, Patch[], Patch[]]\n\n\t/** Normal producer */\n\t<Base, D = Draft<Base>, Return = void>(\n\t\tbase: Base,\n\t\trecipe: (draft: D) => Return\n\t): [Produced<Base, Return>, Patch[], Patch[]]\n}\n\n// Fixes #507: bili doesn't export the types of this file if there is no actual source in it..\n// hopefully it get's tree-shaken away for everyone :)\nexport function never_used() {}\n"]}