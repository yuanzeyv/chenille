{"version":3,"sources":["file:///C:/Users/admin/NewProject_18/assets/src/_docs/b3.js"],"names":["_cjsLoader","__cjsMetaURL","url","define","exports","require","module","__filename","__dirname","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;;8BAEDC,Y,GAAe,cAAYC,G;;AACjCF,MAAAA,UAAU,CAACG,MAAX,CAAkBF,YAAlB,EAAgC,UAAUG,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;;AAGC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,2BAAAC,WAAW,GAAGH,MAAM,CAACF,OAArB;AAGC,OA3ED,EA2EG,EA3EH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n /**\n  * Behavior3JS\n  * ===========\n  *\n  * * * *\n  * \n  * **Behavior3JS** is a Behavior Tree library written in JavaScript. It \n  * provides structures and algorithms that assist you in the task of creating \n  * intelligent agents for your game or application. Check it out some features \n  * of Behavior3JS:\n  * \n  * - Based on the work of (Marzinotto et al., 2014), in which they propose a \n  *   **formal**, **consistent** and **general** definition of Behavior Trees;\n  * - **Optimized to control multiple agents**: you can use a single behavior \n  *   tree instance to handle hundreds of agents;\n  * - It was **designed to load and save trees in a JSON format**, in order to \n  *   use, edit and test it in multiple environments, tools and languages;\n  * - A **cool visual editor** which you can access online;\n  * - Several **composite, decorator and action nodes** available within the \n  *   library. You still can define your own nodes, including composites and \n  *   decorators;\n  * - **Completely free**, the core module and the visual editor are all \n  *   published under the MIT License, which means that you can use them for \n  *   your open source and commercial projects;\n  * - **Lightweight**!\n  * \n  * Visit http://behavior3.com to know more!\n  *\n  * \n  * ## Core Classes and Functions\n  * \n  * This library include the following core structures...\n  *\n  * \n  * **Public:**\n  * \n  * - **BehaviorTree**: the structure that represents a Behavior Tree;\n  * - **Blackboard**: represents a \"memory\" in an agent and is required to to \n  *   run a `BehaviorTree`;\n  * - **Composite**: base class for all composite nodes;\n  * - **Decorator**: base class for all decorator nodes;\n  * - **Action**: base class for all action nodes;\n  * - **Condition**: base class for all condition nodes;\n  *\n  * \n  * **Internal:**\n  * \n  * - **Tick**: used as container and tracking object through the tree during \n  *   the tick signal;\n  * - **BaseNode**: the base class that provide all common node features;\n  * \n  * *Some classes are used internally on Behavior3JS, but you may need to access\n  * its functionalities eventually, specially the `Tick` object.*\n  *\n  * \n  * **Nodes:**\n  *\n  * - **Composite Nodes**: Sequence, Priority, MemSequence, MemPriority.\n  * - **Decorators**: Inverter, Limiter, MaxTime, Repeater, \n  *   RepeaterUntilFailure, RepeaterUntilSuccess.\n  * - **Actions**: Succeeder, Failer, Error, Runner, Wait.\n  * \n  * @module b3\n  * @main b3\n **/\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, {});\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}