{"version":3,"sources":["file:///C:/Users/admin/NewProject_18/assets/Scripts/External/immer/core/finalize.ts"],"names":["processResult","result","scope","unfinalizedDrafts_","drafts_","length","baseDraft","isReplaced","undefined","immer_","useProxies_","willFinalizeES5_","modified_","finalize","parent_","maybeFreeze","patches_","generateReplacementPatches_","inversePatches_","patchListener_","rootScope","value","path","state","key","childValue","finalizeProperty","scope_","base_","finalized_","type_","copy_","draft_","generatePatches_","parentState","targetObject","prop","rootPath","__DEV__","assigned_","concat","res","canAutoFreeze_","autoFreeze_","deep","DRAFT_STATE","isDraftable","NOTHING","each","has","freeze","shallowCopy","isDraft","set","is","get","ProxyTypeES5Object","ProxyTypeES5Array","ProxyTypeSet","getPlugin","die","revokeScope","isFrozen"],"mappings":"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","sourcesContent":["import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tshallowCopy,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tis,\n\tget,\n\tProxyTypeES5Object,\n\tProxyTypeES5Array,\n\tProxyTypeSet,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE],\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumarable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyTypeES5Object || state.type_ === ProxyTypeES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_, true))\n\t\t\t\t: state.copy_\n\t\t// finalize all children of the copy\n\t\teach(result as any, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyTypeSet && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t}\n\t// Unchanged draft properties are ignored.\n\tif (parentState && is(childValue, get(parentState!.base_, prop))) {\n\t\treturn\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\tif (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n"]}